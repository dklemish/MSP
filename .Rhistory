}
plot.data <- cbind(x.grid, z=c(Z))
ggplot(data=data.frame(plot.data), aes(x=Var1, y=Var2, z=z)) +
geom_raster(aes(fill = z)) +
scale_fill_gradient2(high="red", low="blue", midpoint = mean(Z)) +
geom_contour(color="white") +
ggtitle("Max-stable process Z as max over functions
2D Smith process, sigma=0.1") +
theme_bw()
max.iter <- 200
sigma <- 0.01 * diag(2)
Z   <- matrix(0, ncol=n.grid, nrow=n.grid)
Y   <- array(0, dim=c(max.iter, n.grid, n.grid))
S   <- matrix(0, nrow=max.iter, ncol=2)
PSI <- array(0, dim=c(max.iter, n.grid, n.grid))
ZETA.inv <- rep(0, 200)
C.star <- 10
norm.range <- pi
i <- 1
ZETA.inv[i] <- rexp(1,1)
set.seed(1)
while(C.star/ZETA.inv[i] > min(Z/norm.range)){
# Simulate F_i ~ F
# Note for Smith process, F is deterministic = Gaussian pdf
# Simulate S from \mathcal{X} + ball of radius R such that
# \zeta_i F_i(x - S_i) cannot contribute to maximum Z(x) if
# outside ball, i.e. area for which values of F(x-S_i) are
# meaningful.
# For this example, simulate S from unit circle centered at (0.5, 0.5)
theta <- runif(1, 0, 2*pi)
S[i,] <- c(0.5, 0.5) + runif(1) * c(cos(theta), sin(theta))
Y[i,,] <- matrix(dmvnorm(x.grid, S[i,], sigma), nrow=n.grid, ncol=n.grid)
PSI[i,,] <- norm.range * Y[i,,]/ZETA.inv[i]
Z <- matrix(mapply(max, Z, PSI[i,,]), nrow=n.grid, ncol=n.grid)
i <- i+1
ZETA.inv[i] <- ZETA.inv[i-1] + rexp(1, 1)
}
plot.data <- cbind(x.grid, z=c(Z))
ggplot(data=data.frame(plot.data), aes(x=Var1, y=Var2, z=z)) +
geom_raster(aes(fill = z)) +
scale_fill_gradient2(high="red", low="blue", midpoint = mean(Z)) +
geom_contour(color="white") +
ggtitle("Max-stable process Z as max over functions
2D Smith process, sigma=0.1") +
theme_bw()
summary(c(Z))
max.iter <- 200
sigma <- 0.05 * diag(2)
Z   <- matrix(0, ncol=n.grid, nrow=n.grid)
Y   <- array(0, dim=c(max.iter, n.grid, n.grid))
S   <- matrix(0, nrow=max.iter, ncol=2)
PSI <- array(0, dim=c(max.iter, n.grid, n.grid))
ZETA.inv <- rep(0, 200)
C.star <- 15
norm.range <- pi
i <- 1
ZETA.inv[i] <- rexp(1,1)
set.seed(1)
while(C.star/ZETA.inv[i] > min(Z/norm.range)){
# Simulate F_i ~ F
# Note for Smith process, F is deterministic = Gaussian pdf
# Simulate S from \mathcal{X} + ball of radius R such that
# \zeta_i F_i(x - S_i) cannot contribute to maximum Z(x) if
# outside ball, i.e. area for which values of F(x-S_i) are
# meaningful.
# For this example, simulate S from unit circle centered at (0.5, 0.5)
theta <- runif(1, 0, 2*pi)
S[i,] <- c(0.5, 0.5) + runif(1) * c(cos(theta), sin(theta))
Y[i,,] <- matrix(dmvnorm(x.grid, S[i,], sigma), nrow=n.grid, ncol=n.grid)
PSI[i,,] <- norm.range * Y[i,,]/ZETA.inv[i]
Z <- matrix(mapply(max, Z, PSI[i,,]), nrow=n.grid, ncol=n.grid)
i <- i+1
ZETA.inv[i] <- ZETA.inv[i-1] + rexp(1, 1)
}
plot.data <- cbind(x.grid, z=c(Z))
ggplot(data=data.frame(plot.data), aes(x=Var1, y=Var2, z=z)) +
geom_raster(aes(fill = z)) +
scale_fill_gradient2(high="red", low="blue", midpoint = mean(Z)) +
geom_contour(color="white") +
ggtitle("Max-stable process Z as max over functions
2D Smith process, sigma=0.1") +
theme_bw()
summary(c(Z))
max.iter <- 200
sigma <- 0.05 * diag(2)
Z   <- matrix(0, ncol=n.grid, nrow=n.grid)
Y   <- array(0, dim=c(max.iter, n.grid, n.grid))
S   <- matrix(0, nrow=max.iter, ncol=2)
PSI <- array(0, dim=c(max.iter, n.grid, n.grid))
ZETA.inv <- rep(0, 200)
C.star <- 20
norm.range <- pi
i <- 1
ZETA.inv[i] <- rexp(1,1)
set.seed(1)
while(C.star/ZETA.inv[i] > min(Z/norm.range)){
# Simulate F_i ~ F
# Note for Smith process, F is deterministic = Gaussian pdf
# Simulate S from \mathcal{X} + ball of radius R such that
# \zeta_i F_i(x - S_i) cannot contribute to maximum Z(x) if
# outside ball, i.e. area for which values of F(x-S_i) are
# meaningful.
# For this example, simulate S from unit circle centered at (0.5, 0.5)
theta <- runif(1, 0, 2*pi)
S[i,] <- c(0.5, 0.5) + runif(1) * c(cos(theta), sin(theta))
Y[i,,] <- matrix(dmvnorm(x.grid, S[i,], sigma), nrow=n.grid, ncol=n.grid)
PSI[i,,] <- norm.range * Y[i,,]/ZETA.inv[i]
Z <- matrix(mapply(max, Z, PSI[i,,]), nrow=n.grid, ncol=n.grid)
i <- i+1
ZETA.inv[i] <- ZETA.inv[i-1] + rexp(1, 1)
}
plot.data <- cbind(x.grid, z=c(Z))
ggplot(data=data.frame(plot.data), aes(x=Var1, y=Var2, z=z)) +
geom_raster(aes(fill = z)) +
scale_fill_gradient2(high="red", low="blue", midpoint = mean(Z)) +
geom_contour(color="white") +
ggtitle("Max-stable process Z as max over functions
2D Smith process, sigma=0.1") +
theme_bw()
sumary(c(Z))
summary(c(Z))
hist(c(Z))
max.iter <- 200
sigma <- 0.10 * diag(2)
Z   <- matrix(0, ncol=n.grid, nrow=n.grid)
Y   <- array(0, dim=c(max.iter, n.grid, n.grid))
S   <- matrix(0, nrow=max.iter, ncol=2)
PSI <- array(0, dim=c(max.iter, n.grid, n.grid))
ZETA.inv <- rep(0, 200)
C.star <- 25
norm.range <- pi
i <- 1
ZETA.inv[i] <- rexp(1,1)
set.seed(1)
while(C.star/ZETA.inv[i] > min(Z/norm.range)){
# Simulate F_i ~ F
# Note for Smith process, F is deterministic = Gaussian pdf
# Simulate S from \mathcal{X} + ball of radius R such that
# \zeta_i F_i(x - S_i) cannot contribute to maximum Z(x) if
# outside ball, i.e. area for which values of F(x-S_i) are
# meaningful.
# For this example, simulate S from unit circle centered at (0.5, 0.5)
theta <- runif(1, 0, 2*pi)
S[i,] <- c(0.5, 0.5) + runif(1) * c(cos(theta), sin(theta))
Y[i,,] <- matrix(dmvnorm(x.grid, S[i,], sigma), nrow=n.grid, ncol=n.grid)
PSI[i,,] <- norm.range * Y[i,,]/ZETA.inv[i]
Z <- matrix(mapply(max, Z, PSI[i,,]), nrow=n.grid, ncol=n.grid)
i <- i+1
ZETA.inv[i] <- ZETA.inv[i-1] + rexp(1, 1)
}
plot.data <- cbind(x.grid, z=c(Z))
ggplot(data=data.frame(plot.data), aes(x=Var1, y=Var2, z=z)) +
geom_raster(aes(fill = z)) +
scale_fill_gradient2(high="red", low="blue", midpoint = mean(Z)) +
geom_contour(color="white") +
ggtitle("Max-stable process Z as max over functions
2D Smith process, sigma=0.1") +
theme_bw()
max.iter <- 200
sigma <- 0.10 * diag(2)
Z   <- matrix(0, ncol=n.grid, nrow=n.grid)
Y   <- array(0, dim=c(max.iter, n.grid, n.grid))
S   <- matrix(0, nrow=max.iter, ncol=2)
PSI <- array(0, dim=c(max.iter, n.grid, n.grid))
ZETA.inv <- rep(0, 200)
C.star <- 25
norm.range <- pi
i <- 1
ZETA.inv[i] <- rexp(1,1)
set.seed(1)
while(C.star/ZETA.inv[i] > min(Z/norm.range)){
# Simulate F_i ~ F
# Note for Smith process, F is deterministic = Gaussian pdf
# Simulate S from \mathcal{X} + ball of radius R such that
# \zeta_i F_i(x - S_i) cannot contribute to maximum Z(x) if
# outside ball, i.e. area for which values of F(x-S_i) are
# meaningful.
# For this example, simulate S from unit circle centered at (0.5, 0.5)
theta <- runif(1, 0, 2*pi)
S[i,] <- c(0.5, 0.5) + runif(1) * c(cos(theta), sin(theta))
Y[i,,] <- matrix(dmvnorm(x.grid, S[i,], sigma), nrow=n.grid, ncol=n.grid)
PSI[i,,] <- norm.range * Y[i,,]/ZETA.inv[i]
Z <- matrix(mapply(max, Z, PSI[i,,]), nrow=n.grid, ncol=n.grid)
i <- i+1
ZETA.inv[i] <- ZETA.inv[i-1] + rexp(1, 1)
}
plot.data <- cbind(x.grid, z=c(Z))
ggplot(data=data.frame(plot.data), aes(x=Var1, y=Var2, z=z)) +
geom_raster(aes(fill = z)) +
scale_fill_gradient2(high="red", low="blue", midpoint = mean(Z)) +
geom_contour(color="white") +
ggtitle("Max-stable process Z as max over functions
2D Smith process, sigma=0.1") +
theme_bw()
max.iter <- 200
sigma <- 0.10 * diag(2)
Z   <- matrix(0, ncol=n.grid, nrow=n.grid)
Y   <- array(0, dim=c(max.iter, n.grid, n.grid))
S   <- matrix(0, nrow=max.iter, ncol=2)
PSI <- array(0, dim=c(max.iter, n.grid, n.grid))
ZETA.inv <- rep(0, 200)
C.star <- 30
norm.range <- pi
i <- 1
ZETA.inv[i] <- rexp(1,1)
set.seed(1)
while(C.star/ZETA.inv[i] > min(Z/norm.range)){
# Simulate F_i ~ F
# Note for Smith process, F is deterministic = Gaussian pdf
# Simulate S from \mathcal{X} + ball of radius R such that
# \zeta_i F_i(x - S_i) cannot contribute to maximum Z(x) if
# outside ball, i.e. area for which values of F(x-S_i) are
# meaningful.
# For this example, simulate S from unit circle centered at (0.5, 0.5)
theta <- runif(1, 0, 2*pi)
S[i,] <- c(0.5, 0.5) + runif(1) * c(cos(theta), sin(theta))
Y[i,,] <- matrix(dmvnorm(x.grid, S[i,], sigma), nrow=n.grid, ncol=n.grid)
PSI[i,,] <- norm.range * Y[i,,]/ZETA.inv[i]
Z <- matrix(mapply(max, Z, PSI[i,,]), nrow=n.grid, ncol=n.grid)
i <- i+1
ZETA.inv[i] <- ZETA.inv[i-1] + rexp(1, 1)
}
plot.data <- cbind(x.grid, z=c(Z))
ggplot(data=data.frame(plot.data), aes(x=Var1, y=Var2, z=z)) +
geom_raster(aes(fill = z)) +
scale_fill_gradient2(high="red", low="blue", midpoint = mean(Z)) +
geom_contour(color="white") +
ggtitle("Max-stable process Z as max over functions
2D Smith process, sigma=0.1") +
theme_bw()
max.iter <- 500
sigma <- 0.10 * diag(2)
Z   <- matrix(0, ncol=n.grid, nrow=n.grid)
Y   <- array(0, dim=c(max.iter, n.grid, n.grid))
S   <- matrix(0, nrow=max.iter, ncol=2)
PSI <- array(0, dim=c(max.iter, n.grid, n.grid))
ZETA.inv <- rep(0, 200)
C.star <- 10
norm.range <- pi
i <- 1
ZETA.inv[i] <- rexp(1,1)
set.seed(1)
while(C.star/ZETA.inv[i] > min(Z/norm.range)){
# Simulate F_i ~ F
# Note for Smith process, F is deterministic = Gaussian pdf
# Simulate S from \mathcal{X} + ball of radius R such that
# \zeta_i F_i(x - S_i) cannot contribute to maximum Z(x) if
# outside ball, i.e. area for which values of F(x-S_i) are
# meaningful.
# For this example, simulate S from unit circle centered at (0.5, 0.5)
theta <- runif(1, 0, 2*pi)
S[i,] <- c(0.5, 0.5) + runif(1) * c(cos(theta), sin(theta))
Y[i,,] <- matrix(dmvnorm(x.grid, S[i,], sigma), nrow=n.grid, ncol=n.grid)
PSI[i,,] <- norm.range * Y[i,,]/ZETA.inv[i]
Z <- matrix(mapply(max, Z, PSI[i,,]), nrow=n.grid, ncol=n.grid)
i <- i+1
ZETA.inv[i] <- ZETA.inv[i-1] + rexp(1, 1)
}
plot.data <- cbind(x.grid, z=c(Z))
ggplot(data=data.frame(plot.data), aes(x=Var1, y=Var2, z=z)) +
geom_raster(aes(fill = z)) +
scale_fill_gradient2(high="red", low="blue", midpoint = mean(Z)) +
geom_contour(color="white") +
ggtitle("Max-stable process Z as max over functions
2D Smith process, sigma=0.1") +
theme_bw()
Z   <- matrix(0, ncol=n.grid, nrow=n.grid)
Y   <- array(0, dim=c(max.iter, n.grid, n.grid))
S   <- matrix(0, nrow=max.iter, ncol=2)
PSI <- array(0, dim=c(max.iter, n.grid, n.grid))
ZETA.inv <- rep(0, 200)
C.star <- 20
norm.range <- pi
i <- 1
ZETA.inv[i] <- rexp(1,1)
set.seed(1)
while(C.star/ZETA.inv[i] > min(Z/norm.range)){
# Simulate F_i ~ F
# Note for Smith process, F is deterministic = Gaussian pdf
# Simulate S from \mathcal{X} + ball of radius R such that
# \zeta_i F_i(x - S_i) cannot contribute to maximum Z(x) if
# outside ball, i.e. area for which values of F(x-S_i) are
# meaningful.
# For this example, simulate S from unit circle centered at (0.5, 0.5)
theta <- runif(1, 0, 2*pi)
S[i,] <- c(0.5, 0.5) + runif(1) * c(cos(theta), sin(theta))
Y[i,,] <- matrix(dmvnorm(x.grid, S[i,], sigma), nrow=n.grid, ncol=n.grid)
PSI[i,,] <- norm.range * Y[i,,]/ZETA.inv[i]
Z <- matrix(mapply(max, Z, PSI[i,,]), nrow=n.grid, ncol=n.grid)
i <- i+1
ZETA.inv[i] <- ZETA.inv[i-1] + rexp(1, 1)
}
plot.data <- cbind(x.grid, z=c(Z))
ggplot(data=data.frame(plot.data), aes(x=Var1, y=Var2, z=z)) +
geom_raster(aes(fill = z)) +
scale_fill_gradient2(high="red", low="blue", midpoint = mean(Z)) +
geom_contour(color="white") +
ggtitle("Max-stable process Z as max over functions
2D Smith process, sigma=0.1") +
theme_bw()
Z   <- matrix(0, ncol=n.grid, nrow=n.grid)
Y   <- array(0, dim=c(max.iter, n.grid, n.grid))
S   <- matrix(0, nrow=max.iter, ncol=2)
PSI <- array(0, dim=c(max.iter, n.grid, n.grid))
ZETA.inv <- rep(0, 200)
C.star <- 30
norm.range <- pi
i <- 1
ZETA.inv[i] <- rexp(1,1)
set.seed(1)
while(C.star/ZETA.inv[i] > min(Z/norm.range)){
# Simulate F_i ~ F
# Note for Smith process, F is deterministic = Gaussian pdf
# Simulate S from \mathcal{X} + ball of radius R such that
# \zeta_i F_i(x - S_i) cannot contribute to maximum Z(x) if
# outside ball, i.e. area for which values of F(x-S_i) are
# meaningful.
# For this example, simulate S from unit circle centered at (0.5, 0.5)
theta <- runif(1, 0, 2*pi)
S[i,] <- c(0.5, 0.5) + runif(1) * c(cos(theta), sin(theta))
Y[i,,] <- matrix(dmvnorm(x.grid, S[i,], sigma), nrow=n.grid, ncol=n.grid)
PSI[i,,] <- norm.range * Y[i,,]/ZETA.inv[i]
Z <- matrix(mapply(max, Z, PSI[i,,]), nrow=n.grid, ncol=n.grid)
i <- i+1
ZETA.inv[i] <- ZETA.inv[i-1] + rexp(1, 1)
}
plot.data <- cbind(x.grid, z=c(Z))
ggplot(data=data.frame(plot.data), aes(x=Var1, y=Var2, z=z)) +
geom_raster(aes(fill = z)) +
scale_fill_gradient2(high="red", low="blue", midpoint = mean(Z)) +
geom_contour(color="white") +
ggtitle("Max-stable process Z as max over functions
2D Smith process, sigma=0.1") +
theme_bw()
Z   <- matrix(0, ncol=n.grid, nrow=n.grid)
Y   <- array(0, dim=c(max.iter, n.grid, n.grid))
S   <- matrix(0, nrow=max.iter, ncol=2)
PSI <- array(0, dim=c(max.iter, n.grid, n.grid))
ZETA.inv <- rep(0, 200)
C.star <- 40
norm.range <- pi
i <- 1
ZETA.inv[i] <- rexp(1,1)
set.seed(1)
while(C.star/ZETA.inv[i] > min(Z/norm.range)){
# Simulate F_i ~ F
# Note for Smith process, F is deterministic = Gaussian pdf
# Simulate S from \mathcal{X} + ball of radius R such that
# \zeta_i F_i(x - S_i) cannot contribute to maximum Z(x) if
# outside ball, i.e. area for which values of F(x-S_i) are
# meaningful.
# For this example, simulate S from unit circle centered at (0.5, 0.5)
theta <- runif(1, 0, 2*pi)
S[i,] <- c(0.5, 0.5) + runif(1) * c(cos(theta), sin(theta))
Y[i,,] <- matrix(dmvnorm(x.grid, S[i,], sigma), nrow=n.grid, ncol=n.grid)
PSI[i,,] <- norm.range * Y[i,,]/ZETA.inv[i]
Z <- matrix(mapply(max, Z, PSI[i,,]), nrow=n.grid, ncol=n.grid)
i <- i+1
ZETA.inv[i] <- ZETA.inv[i-1] + rexp(1, 1)
}
plot.data <- cbind(x.grid, z=c(Z))
ggplot(data=data.frame(plot.data), aes(x=Var1, y=Var2, z=z)) +
geom_raster(aes(fill = z)) +
scale_fill_gradient2(high="red", low="blue", midpoint = mean(Z)) +
geom_contour(color="white") +
ggtitle("Max-stable process Z as max over functions
2D Smith process, sigma=0.1") +
theme_bw()
max.iter <- 500
sigma <- 0.10 * diag(2)
Z   <- matrix(0, ncol=n.grid, nrow=n.grid)
Y   <- array(0, dim=c(max.iter, n.grid, n.grid))
S   <- matrix(0, nrow=max.iter, ncol=2)
PSI <- array(0, dim=c(max.iter, n.grid, n.grid))
ZETA.inv <- rep(0, 200)
C.star <- 50
norm.range <- pi
i <- 1
ZETA.inv[i] <- rexp(1,1)
set.seed(1)
while(C.star/ZETA.inv[i] > min(Z/norm.range)){
# Simulate F_i ~ F
# Note for Smith process, F is deterministic = Gaussian pdf
# Simulate S from \mathcal{X} + ball of radius R such that
# \zeta_i F_i(x - S_i) cannot contribute to maximum Z(x) if
# outside ball, i.e. area for which values of F(x-S_i) are
# meaningful.
# For this example, simulate S from unit circle centered at (0.5, 0.5)
theta <- runif(1, 0, 2*pi)
S[i,] <- c(0.5, 0.5) + runif(1) * c(cos(theta), sin(theta))
Y[i,,] <- matrix(dmvnorm(x.grid, S[i,], sigma), nrow=n.grid, ncol=n.grid)
PSI[i,,] <- norm.range * Y[i,,]/ZETA.inv[i]
Z <- matrix(mapply(max, Z, PSI[i,,]), nrow=n.grid, ncol=n.grid)
i <- i+1
ZETA.inv[i] <- ZETA.inv[i-1] + rexp(1, 1)
}
plot.data <- cbind(x.grid, z=c(Z))
ggplot(data=data.frame(plot.data), aes(x=Var1, y=Var2, z=z)) +
geom_raster(aes(fill = z)) +
scale_fill_gradient2(high="red", low="blue", midpoint = mean(Z)) +
geom_contour(color="white") +
ggtitle("Max-stable process Z as max over functions
2D Smith process, sigma=0.1") +
theme_bw()
library(MSP)
test5 <- simSmith(n=50, dim=2, sigma2=0.1, keepPsi = TRUE, Cstar = 40)
test5 <- simSmith(n=50, dim=2, sigma2=0.1, keepPsi = TRUE, Cstar = 20)
plot.data <- data.frame(cbind(test5$X, test5$Z))
colnames(plot.data) <- c("X", "Y", "Z")
ggplot(data=data.frame(plot.data), aes(x=X, y=Y, z=Z)) +
geom_raster(aes(fill = Z)) +
scale_fill_gradientn(colors=terrain.colors(50)) +
geom_contour(color="white")
test5 <- simSmith(n=50, dim=2, sigma2=0.1, keepPsi = TRUE, Cstar = 30)
plot.data <- data.frame(cbind(test5$X, test5$Z))
colnames(plot.data) <- c("X", "Y", "Z")
ggplot(data=data.frame(plot.data), aes(x=X, y=Y, z=Z)) +
geom_raster(aes(fill = Z)) +
scale_fill_gradientn(colors=terrain.colors(50)) +
geom_contour(color="white")
test5 <- simSmith(n=50, dim=2, sigma2=0.1, keepPsi = TRUE, Cstar = 20, seed=6)
plot.data <- data.frame(cbind(test5$X, test5$Z))
colnames(plot.data) <- c("X", "Y", "Z")
ggplot(data=data.frame(plot.data), aes(x=X, y=Y, z=Z)) +
geom_raster(aes(fill = Z)) +
scale_fill_gradientn(colors=terrain.colors(50)) +
geom_contour(color="white")
test5 <- simSmith(n=50, dim=2, sigma2=0.1, keepPsi = TRUE, Cstar = 30, seed=6)
plot.data <- data.frame(cbind(test5$X, test5$Z))
colnames(plot.data) <- c("X", "Y", "Z")
ggplot(data=data.frame(plot.data), aes(x=X, y=Y, z=Z)) +
geom_raster(aes(fill = Z)) +
scale_fill_gradientn(colors=terrain.colors(50)) +
geom_contour(color="white")
test5 <- simSmith(n=50, dim=2, sigma2=0.1, keepPsi = TRUE, Cstar = 40, seed=6)
plot.data <- data.frame(cbind(test5$X, test5$Z))
colnames(plot.data) <- c("X", "Y", "Z")
ggplot(data=data.frame(plot.data), aes(x=X, y=Y, z=Z)) +
geom_raster(aes(fill = Z)) +
scale_fill_gradientn(colors=terrain.colors(50)) +
geom_contour(color="white")
test5 <- simSmith(n=50, dim=2, sigma2=0.1, keepPsi = TRUE, Cstar = 40, seed=8)
test5 <- simSmith(n=50, dim=2, sigma2=0.1, keepPsi = TRUE, Cstar = 40, seed=9)
test5 <- simSmith(n=50, dim=2, sigma2=0.1, keepPsi = TRUE, Cstar = 40, seed=10)
plot.data <- data.frame(cbind(test5$X, test5$Z))
colnames(plot.data) <- c("X", "Y", "Z")
ggplot(data=data.frame(plot.data), aes(x=X, y=Y, z=Z)) +
geom_raster(aes(fill = Z)) +
scale_fill_gradientn(colors=terrain.colors(50)) +
geom_contour(color="white")
summary(c(test5$Z))
test5 <- simSmith(n=50, dim=2, sigma2=0.1, keepPsi = TRUE, Cstar = 50, seed=10)
summary(c(test5$Z))
plot.data <- data.frame(cbind(test5$X, test5$Z))
colnames(plot.data) <- c("X", "Y", "Z")
ggplot(data=data.frame(plot.data), aes(x=X, y=Y, z=Z)) +
geom_raster(aes(fill = Z)) +
scale_fill_gradientn(colors=terrain.colors(50)) +
geom_contour(color="white")
library(MSP)
test5 <- simSmith(n=50, dim=2, sigma2=0.1, keepPsi = TRUE, Cstar=20, seed=6)
test5 <- simSmith(n=50, dim=2, sigma2=0.1, keepPsi = TRUE, Cstar=20, seed=4)
test5 <- simSmith(n=50, dim=2, sigma2=0.1, keepPsi = TRUE, Cstar=10, seed=2)
test5 <- simSmith(n=50, dim=2, sigma2=0.1, keepPsi = TRUE, Cstar=5, seed=2)
plot.data <- data.frame(cbind(test5$X, test5$Z))
colnames(plot.data) <- c("X", "Y", "Z")
ggplot(data=data.frame(plot.data), aes(x=X, y=Y, z=Z)) +
geom_raster(aes(fill = Z)) +
scale_fill_gradientn(colors=terrain.colors(50)) +
geom_contour(color="white")
test5 <- simSmith(n=50, dim=2, sigma2=0.1, keepPsi = TRUE, Cstar=5, seed=4)
plot.data <- data.frame(cbind(test5$X, test5$Z))
colnames(plot.data) <- c("X", "Y", "Z")
ggplot(data=data.frame(plot.data), aes(x=X, y=Y, z=Z)) +
geom_raster(aes(fill = Z)) +
scale_fill_gradientn(colors=terrain.colors(50)) +
geom_contour(color="white")
test5 <- simSmith(n=50, dim=2, sigma2=0.1, keepPsi = TRUE, Cstar=5, seed=5)
plot.data <- data.frame(cbind(test5$X, test5$Z))
colnames(plot.data) <- c("X", "Y", "Z")
ggplot(data=data.frame(plot.data), aes(x=X, y=Y, z=Z)) +
geom_raster(aes(fill = Z)) +
scale_fill_gradientn(colors=terrain.colors(50)) +
geom_contour(color="white")
test5 <- simSmith(n=50, dim=2, sigma2=0.1, keepPsi = TRUE, Cstar=5, seed=6)
plot.data <- data.frame(cbind(test5$X, test5$Z))
colnames(plot.data) <- c("X", "Y", "Z")
ggplot(data=data.frame(plot.data), aes(x=X, y=Y, z=Z)) +
geom_raster(aes(fill = Z)) +
scale_fill_gradientn(colors=terrain.colors(50)) +
geom_contour(color="white")
test5 <- simSmith(n=50, dim=2, sigma2=0.1, keepPsi = TRUE, Cstar=5, seed=7)
plot.data <- data.frame(cbind(test5$X, test5$Z))
colnames(plot.data) <- c("X", "Y", "Z")
ggplot(data=data.frame(plot.data), aes(x=X, y=Y, z=Z)) +
geom_raster(aes(fill = Z)) +
scale_fill_gradientn(colors=terrain.colors(50)) +
geom_contour(color="white")
test5 <- simSmith(n=50, dim=2, sigma2=0.1, keepPsi = TRUE, Cstar=5, seed=8)
plot.data <- data.frame(cbind(test5$X, test5$Z))
colnames(plot.data) <- c("X", "Y", "Z")
ggplot(data=data.frame(plot.data), aes(x=X, y=Y, z=Z)) +
geom_raster(aes(fill = Z)) +
scale_fill_gradientn(colors=terrain.colors(50)) +
geom_contour(color="white")
test5 <- simSmith(n=50, dim=2, sigma2=0.1, keepPsi = TRUE, Cstar=5, seed=9)
plot.data <- data.frame(cbind(test5$X, test5$Z))
colnames(plot.data) <- c("X", "Y", "Z")
ggplot(data=data.frame(plot.data), aes(x=X, y=Y, z=Z)) +
geom_raster(aes(fill = Z)) +
scale_fill_gradientn(colors=terrain.colors(50)) +
geom_contour(color="white")
